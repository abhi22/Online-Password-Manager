package com.mydomain.OnPass.action;

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import org.jboss.seam.Component;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.contexts.Contexts;
import org.jboss.seam.log.Log;
import org.jboss.seam.security.Credentials;
import org.jboss.seam.security.Identity;
import org.richfaces.event.UploadEvent;

import pg.Generator;
import pg.StringOperations;

import com.mydomain.OnPass.model.History;
import com.mydomain.OnPass.model.Password;
import com.mydomain.OnPass.model.User;

@Name("authenticator")
@Scope(ScopeType.SESSION)
public class Authenticator {
	@Logger
	private Log log;

	private String username = "";
	private String password = "";
	private String created_password;
	private String strength_image = "img/strenght/str.png";
	private List<String> optionList;
	private String passDuration;
	private int passwordLength;
	private int pswd_str = 6;
	private String img = "img/pass_icon.png";
	private String iconUrl;
	private int defaultOther;
	private int counter = 0;
	private int counter2 = 0;
	private String idForBut;
	private String pass_content = "";
	private String show_hide = "img/show.png";
	private boolean change;
	private String styleForPasswords;
	private String styleForHistory;
	private boolean b = true;
	private boolean successfullTransaction = false;
	md5encryption hash;
	FileUploadBean fileUploadBean = (FileUploadBean)Component.getInstance("fileUploadBean");
	Generator g = new Generator(10, true, true, true, true);
	StringOperations so = new StringOperations();
	SMS sms = new SMS();
	encryption enc;
	User user, userForPhishing;
	Password pas;
	private History hist;
	List<History> histList;
	@In("entityManager")
	EntityManager em;

	@Create
	public void create() {
		pas = new Password();
		optionList = new ArrayList<String>();
		optionList.add("u");
		optionList.add("l");
		optionList.add("n");
		optionList.add("s");
		passDuration = "7";
		defaultOther = 0;
	}
    public boolean preAuthenticate(){
    	List<User> existing = em
		.createQuery(
				"select u from User u where u.email=:email")
		.setParameter("email", getUsername()).getResultList();
    	if(existing.size()==1){
    		userForPhishing = existing.get(0);
    		log.info("NASHEL");
    		return true;
    	}
    	else {
    		log.info("NE NASHEL");
    		return false;
    	}
    }
	public boolean authenticate() {
		hash = new md5encryption();
		List<User> existing = em
				.createQuery(
						"select u from User u where u.email=:email and u.password=:password")
				.setParameter("email", getUsername())
				.setParameter("password",hash.HashMd5(getPassword())).getResultList();
		if (existing.size() > 0) {
				user = existing.get(0);
				addLog("You have successfully logged in");
					if(user.isLoginNotify()){
						Calendar c = Calendar.getInstance();
						SimpleDateFormat  formatter = new SimpleDateFormat ("[dd.MM.yyyy]");
						SimpleDateFormat  formatter2 = new SimpleDateFormat("[KK:mm aa]");
						sms.send(user.getNumber(),"Dear, "+user.getFullname()+" you have logged in on " +formatter.format(c.getTime())+ " at"+formatter2.format(c.getTime())+
	 	    			 				  ". This message is autogenerated. Do not answer it. With love, your Password Manager");
	 	    }
			 
		if (user.getPass().size() < 8) {
					setStyleForPasswords("passwords");
			} else {
					setStyleForPasswords("passwords_overflood");
			}
			
			return true;

		} else {

			return false;
		}

	}
	
	public void addPhishingImage(UploadEvent event){
				
				try {
					fileUploadBean.listener(event, user);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	}


	public void addPassword() {
		Password password = new Password();
		password.setPass_name(pas.getPass_name());
		password.setPass_start(pas.getPass_start());
		password.setPass_end(pas.getPass_end());
		password.setIcon(pas.getIcon());
		try {
			password.setPass_content(enc.encrypt(getCreated_password()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		password.setUrl(pas.getUrl());
		password.setStrenght(pas.getStrenght());
		password.setUser(user);
		password.setPass_username(pas.getPass_username());
		em.persist(password);
		user.getPass().add(password);
		if (user.getPass().size() <= 8) {
			setStyleForPasswords("passwords");
		} else {
			setStyleForPasswords("passwords_overflood");
		}
	    addLog("You have added password for "+ pas.getPass_name()+" service");
		
		refreshAddPasswordPanel();
		log.info("Password successfully added");
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Password getPas() {
		return pas;
	}

	public void setPas(Password pas) {
		this.pas = pas;
	}

	public String getCreated_password() {
		return created_password;
	}

	public void setCreated_password(String created_password) {
		this.created_password = created_password;
		// pas.setPass_content(created_password);
	}

	public void generatePassword() {
		boolean b[] = new boolean[4];

		for (String option : optionList) {
			if (option.equalsIgnoreCase("u")) {
				b[0] = true;
			}
			if (option.equalsIgnoreCase("l")) {
				b[1] = true;
			}
			if (option.equalsIgnoreCase("n")) {
				b[2] = true;
			}
			if (option.equalsIgnoreCase("s")) {
				b[3] = true;
			}
		}
		g = new Generator(getPasswordLength(), b[0], b[1], b[2], b[3]);
		setCreated_password(g.getGeneratedPassword());
		so.setPasswordStrenght(g.getGeneratedPassword());
		setPswd_str(so.getPasswordStrenght());
		setStrength_image(getPswd_str());
	}

	public int getPswd_str() {
		return pswd_str;
	}

	public void setPswd_str(int pswd_str) {
		this.pswd_str = pswd_str;
	}

	public void checkStrength() {
		so.setPasswordStrenght(getCreated_password());
		setPswd_str(so.getPasswordStrenght());
		setStrength_image(getPswd_str());
	}

	public String getStrength_image() {
		return strength_image;
	}

	public void setStrength_image(int i) {
		String image = "";
		if (i == 0) {
			image = "img/strenght/str.png";
		}
		if (i == 1) {
			image = "img/strenght/st0.png";
		}
		if (i == 2) {
			image = "img/strenght/st1.png";
		}
		if (i == 3) {
			image = "img/strenght/st3.png";
		}
		if (i == 4) {
			image = "img/strenght/st4.png";
		}
		if (i == 5) {
			image = "img/strenght/st5.png";
		}

		this.strength_image = image;
		pas.setStrenght(strength_image);
	}

	public List<String> getOptionList() {

		return optionList;
	}

	public void setOptionList(List<String> optionList) {

		this.optionList = optionList;
	}

	public int getPasswordLength() {

		return passwordLength;
	}

	public void setPasswordLength(int passwordLength) {

		this.passwordLength = passwordLength;
	}

	public String getImg() {
		return img;
	}

	public void setImg(String img) {
		this.img = img;
	}

	public String getIconUrl() {
		return iconUrl;
	}

	public void setIconUrl(String iconUrl) {
		this.iconUrl = iconUrl;
		if (iconUrl != null) {
			setImg(iconUrl);
			pas.setIcon(iconUrl);
		}

	}

	public String getPassDuration() {
		return passDuration;
	}

	public int getDefaultOther() {
		return defaultOther;
	}

	public void setDefaultOther(int defaultOther) {
		if (defaultOther == 0) {
			setImg("img/pass_icon.png");
			pas.setIcon("img/pass_icon.png");
		}
		this.defaultOther = defaultOther;
	}

	public void setPassDuration(String passDuration) {
		Calendar c = Calendar.getInstance();
		SimpleDateFormat format = new SimpleDateFormat("ddMMMyyyy");
		pas.setPass_start(c.getTime());
		c.add(Calendar.DATE, Integer.parseInt(passDuration));
		Calendar enddate = Calendar.getInstance();
		enddate.set(c.get(com.ibm.icu.util.Calendar.YEAR),
				c.get(com.ibm.icu.util.Calendar.MONTH),
				c.get(com.ibm.icu.util.Calendar.DATE));
		pas.setPass_end(enddate.getTime());
		this.passDuration = passDuration;
	}

	public void refreshAddPasswordPanel() {
		log.info("Refreshing the AddPasswordPanel");
		pas.setIcon("");
		pas.setPass_content("");
		pas.setPass_name("");
		pas.setUrl("");
		pas.setPass_username("");
		setCreated_password("");
		setPasswordLength(0);
		setIconUrl("");
		setImg("img/pass_icon.png");
		setStrength_image(0);
		setPassDuration("6");
	}

	public void CopyToClipboard(Password p) {
		log.info(p.getPass_content());
		setPass_content(p.getPass_content());
	}

	public String getPass_content() {
		return pass_content;
	}

	public void setPass_content(String pass_content) {

		try {
			this.pass_content = enc.decrypt(pass_content);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public String getShow_hide() {
		return show_hide;
	}

	public void setShow_hide(String show_hide) {
		this.show_hide = show_hide;
	}

	public void toggle() {
		b = !b;
		log.info("TOGGLE");
		if (b) {
			setShow_hide("img/show.png");
		} else {
			setShow_hide("img/hide.png");
		}

	}

	public void delete(Password p) {
		log.info(p.getPass_ID());
		Password toDelete = em.find(Password.class, p.getPass_ID());
		em.remove(toDelete);
		user.getPass().remove(p);
		if (user.getPass().size() <= 8) {
			setStyleForPasswords("passwords");
		} else {
			setStyleForPasswords("passwords_overflood");
		}
        addLog("You have deleted password for "+p.getPass_name()+" service");
	}
	public void deleteHist(History h){
		History toDelete = em.find(History.class,h.getHist_ID());
		em.remove(toDelete);
		getHistList().remove(h);
		if(getHistList().size()<=13){
			setStyleForHistory("histories");
		} else {
			setStyleForHistory("histories_overflood");
		}
		log.info("History deleted");
	}

	public void preUpdate(Password p) {
		setImg(p.getIcon());
		setIconUrl(p.getIcon());
		pas.setPass_ID(p.getPass_ID());
		pas.setPass_name(p.getPass_name());
		pas.setUrl(p.getUrl());
		pas.setPass_username(p.getPass_username());
		try {
			setCreated_password(enc.decrypt(p.getPass_content()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void update() {
		Password toUpdate = em.find(Password.class, pas.getPass_ID());
		try {
			toUpdate.setPass_content(enc.encrypt(getCreated_password()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		toUpdate.setPass_ID(pas.getPass_ID());
		toUpdate.setPass_name(pas.getPass_name());
		toUpdate.setIcon(pas.getIcon());
		toUpdate.setUrl(pas.getUrl());
		if (isChange() == true) {
			toUpdate.setPass_start(pas.getPass_start());
			toUpdate.setPass_end(pas.getPass_end());
		}
		toUpdate.setPass_username(pas.getPass_username());
		toUpdate.setStrenght(pas.getStrenght());
		List<User> existing = em
				.createQuery(
						"select u from User u where u.email=:email and u.password=:password")
				.setParameter("email", getUsername())
				.setParameter("password", getPassword()).getResultList();
		if (existing.size() > 0) {
			user = existing.get(0);
		}
        addLog("You have updated password for "+pas.getPass_name()+" service");
		refreshAddPasswordPanel();

	}
	public void updateUser(){
		User toUpdate = em.find(User.class, user.getEmail());
		toUpdate.setExpiryNotify(user.isExpiryNotify());
		toUpdate.setLoginNotify(user.isLoginNotify());
		toUpdate.setNumber(user.getNumber());
		setSuccessfullTransaction(true);
	}

	public void idGenerator() {
		setIdForBut("but" + counter2 + "");
		counter2++;
	}

	public String getIdForBut() {
		return idForBut;
	}

	public void setIdForBut(String idForBut) {
		this.idForBut = idForBut;
	}

	public boolean isChange() {
		return change;
	}

	public void setChange(boolean change) {
		this.change = change;
	}

	public String getStyleForPasswords() {
		return styleForPasswords;
	}

	public void setStyleForPasswords(String styleForPasswords) {
		this.styleForPasswords = styleForPasswords;
	}
	public void addLog(String s){
	     Calendar c = Calendar.getInstance();
	     History hist = new History();
	     hist.setTime(c.getTime());
	     hist.setUser(user);
	     hist.setComment(s);
	     em.persist(hist);
		}
	
	public String moveToHistory(){
		log.info("HISTORY BUTTON PRESSED");
		List<History> list = em.createQuery("select h from History h where h.user.email=:userName").setParameter("userName",user.getEmail()).getResultList(); 			
		Collections.reverse(list);
		setHistList(list);
		if(getHistList().size()<=13){
			setStyleForHistory("histories");
		} else {
			setStyleForHistory("histories_overflood");
		}
	    return "history";
	}
	public String moveToPasswords(){
		log.info("PASSWORDS BUTTON PRESSED");
		
		return "passwords";
	}
	public String moveToSMS(){
		setSuccessfullTransaction(false);
		log.info("SMS BUTTON PRESSED");
		return "sms";
	}
	public String goBack(){
		
		return "goback";
	}

	public List<History> getHistList() {
		return histList;
	}

	public void setHistList(List<History> histList) {
		this.histList = histList;
	}

	public String getStyleForHistory() {
		return styleForHistory;
	}

	public void setStyleForHistory(String styleForHistory) {
		this.styleForHistory = styleForHistory;
	}
	
	public String LogOut(){
		user = null;
		setUsername("");
		setPassword("");
		log.info("LOGOUTING!");
		return "logout";
	}

	public boolean isSuccessfullTransaction() {
		return successfullTransaction;
	}

	public void setSuccessfullTransaction(boolean successfullTransaction) {
		this.successfullTransaction = successfullTransaction;
	}
	public User getUserForPhishing() {
		return userForPhishing;
	}
	public void setUserForPhishing(User userForPhishing) {
		this.userForPhishing = userForPhishing;
	}
	
	
	
	
}
